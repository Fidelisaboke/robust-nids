name: Python Code Quality and Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Run Flake8
        run: |
          # Strict check for errors
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Style check
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 \
            --statistics --ignore=E722,W503,E203

      - name: Run Black check
        run: black --check .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11", "3.12" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -v --cov=ml --cov=database --cov=services --cov=utils \
          --cov-report=xml tests/

      - name: Display coverage in GitHub summary
        if: success()
        run: |
          coverage report -m >> $GITHUB_STEP_SUMMARY
